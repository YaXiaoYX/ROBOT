import RPi.GPIO as GPIO 
from gpiozero import DigitalInputDevice, Robot
from time import sleep



class Encoder(object):
    def __init__(self, pin):
        self._value = 0

        # setup gpiozero to call increment on each when_activated
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.add_event_detect(pin, GPIO.FALLING, callback=self._increment, bouncetime=10)  
        #encoder = DigitalInputDevice(pin)
        #encoder.when_activated = self._increment
        #encoder.when_deactivated = self._increment
    def reset(self):
        self._value = 0

    def _increment(self, channel):
        self._value += 1

    @property
    def value(self):
        return self._value

SAMPLETIME = 1

r = Robot((23,24), (26,22)) 
e1 = Encoder(27)
e2 = Encoder(21)



#start the robot
m1_speed = 0.5
m2_speed = 0.3
KP = 0.0002
r.value = (m1_speed, m2_speed)

#find a sample rate

while True:
    print("e1 {} e2 {}".format(e1.value, e2.value))
    diff = e1.value-e2.value
    print(diff)
    m2_speed = m1_speed + KP*diff
    if (m2_speed>1):
        m2_speed = 1
    elif (m2_speed<-1):
        m2_speed = -1

    print("m1 {} m2 {}".format(m1_speed, m2_speed))

    r.value = (m1_speed, m2_speed)

    sleep(SAMPLETIME)






#    if (m1_speed<1 and m1_speed>-1 and  m2_speed<1 and m2_speed>-1):
#         if(e1.value < e2.value):
#             del_error = abs(e1.value-e2.value)
#             print(del_error)
#             m1_speed += m1_speed + (KP * del_error)
#             if (m1_speed>1):
#                m1_speed=1
#         elif(e1.value > e2.value):
#             del_error = abs(e1.value-e2.value)
#             m2_speed += m2_speed + (KP*del_error)
#             print("...")
#             print(del_error)
#             if (m2_speed>1):
#                m2_speed=1
#    r.value = (m1_speed, m2_speed)
#
#    print("m1 {} m2 {}".format(m1_speed, m2_speed))
#    sleep(SAMPLETIME)
