import time
import threading
import RPi.GPIO as GPIO   
from gpiozero import DigitalInputDevice, Robot
from time import sleep

class Encoder(object):
    def __init__(self, pin):
        self._value = 0
        #GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        #GPIO.add_event_detect(pin, GPIO.FALLING, callback=self._increment, bouncetime=10)  
        encoder = DigitalInputDevice(pin, pull_up=True)
        encoder.when_activated = self._increment
        encoder.when_deactivated = self._increment
# setup gpiozero to call increment on each when_activated

    def reset(self):
        self._value = 0

    def _increment(self):
        self._value += 1

    @property
    def value(self):
        return self._value

SAMPLETIME = 0.0012
TARGET = 80
KP = 0.022

en1 =12 
en2 = 13
#GPIO.setmode(GPIO.BCM)
#GPIO.setup(en1,GPIO.OUT)
#GPIO.output(en1,GPIO.HIGH)
#GPIO.setup(en2,GPIO.OUT)
#GPIO.output(en2,GPIO.HIGH)


encode1 = 21
encode2 =27

r = Robot((23,24), (26,22)) 
e1 = Encoder(encode1)
e2 = Encoder(encode2)

m1_speed = 1
m2_speed = 1
r.value = (m1_speed, m2_speed)
tic = time.clock()

enc2=0
distance=2.5
try:
    while enc2<1490/3.0:
   
        print("e1 {} e2 {}".format(e1.value, e2.value))
        e1_error = TARGET - e1.value
        e2_error = TARGET - e2.value

        m1_speed += e1_error * KP
        m2_speed += e2_error * KP

        m1_speed = max(min(1, m1_speed), 0)
        m2_speed = max(min(1, m2_speed), 0)

        r.value = (m1_speed, m2_speed)

        print("e1 {} e2 {}".format(e1.value, e2.value))
        print("m1 {} m2 {}".format(m1_speed, m2_speed))
        enc2=enc2+e2.value
        e1.reset()
        e2.reset()

        sleep(SAMPLETIME)

except KeyboardInterrupt:
    toc=time.clock()
    print("time is {}    {}".format(toc-tic, enc2))
